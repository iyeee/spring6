<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--    singleton+setter模式下的循环依赖是没有任何问题的-->
    <!--    singleton表示在整个spring容器当中是单例的，独一无二的对象-->
    <!--    主要原因是，在这种模式下，spring对bean的管理主要分为清晰的两个阶段-->
    <!--    第一个阶段：在spring容器加载到额时候，实例化bean，主要其中任意一个bean实例化之后，马上就进行“曝光”（不等属性赋值就曝光）-->
    <!--    第二个阶段：曝光之后，再进行属性的赋值-->
    <!--    核心解决方案是：实例化对象和对象的属性赋值分为两个阶段完成-->
    <!--    只有在singleton的情况下，bean才会采取提前“曝光“的措施-->
    <bean id="husbandBean" class="com.powernode.spring6.bean.Husband" scope="singleton">
        <property name="name" value="zs"/>
        <property name="wife" ref="wifeBean"/>
    </bean>

    <bean id="wifeBean" class="com.powernode.spring6.bean.Wife" scope="singleton">
        <property name="name" value="xh"/>
        <property name="husband" ref="husbandBean"/>
    </bean>

    <!--    在singleton+constructor模式下的循环依赖-->
    <!--    <bean id="husbandBean" class="com.powernode.spring6.bean2.Husband" scope="singleton">-->
    <!--        <constructor-arg index="0" value="zs"/>-->
    <!--        <constructor-arg index="1" ref="wifeBean"/>-->
    <!--    </bean>-->

    <!--    <bean id="wifeBean" class="com.powernode.spring6.bean2.Wife" scope="singleton">-->
    <!--        <constructor-arg index="0" value="xh"/>-->
    <!--        <constructor-arg index="1" ref="husbandBean"/>-->
    <!--    </bean>-->


</beans>